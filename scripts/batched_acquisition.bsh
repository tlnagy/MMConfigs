/*  Image positions in batches, i.e. introduce a hierarchy in the position 
 *  list such that each batch of positions is imaged in parallel while batches 
 *  themselves are imaged in series.
 * 
 *  Tamas Nagy, 2019
 * 
 */

import org.micromanager.PositionList;
import org.micromanager.MultiStagePosition;
import org.micromanager.data.Coords;
import org.micromanager.data.Image;
import org.micromanager.data.Datastore;
import org.micromanager.data.Metadata;
import org.micromanager.display.DisplayWindow;
import org.micromanager.acquisition.ChannelSpec;

import java.util.LinkedHashMap;
import java.util.ArrayList;
import java.io.File;

PositionList pl = mm.positions().getPositionList();

LinkedHashMap batchedPos = new LinkedHashMap();

print("Batching positions by well");

addClassPath("C:/Data/tamas/MMConfigs/scripts/");
importCommands("/");
data = batchSelectionDialog(pl, mm);
if (data == -1) { return; }
dac_number = data.get(1); // DAC
power_lvl = Double.valueOf(data.get(2)); // get power level
initial_exposure = Integer.valueOf(data.get(3)); // get initial exposure time
refresh_exposure = Integer.valueOf(data.get(4)); // get refresh exposure time
initial_frame = Integer.valueOf(data.get(5));

//iterate over all the positions and group them by well
for (int p=0; p < pl.getNumberOfPositions(); p++) {
	position = pl.getPosition(p);
	details = data.get(0).get(p);
	batch = details.get(1); // the batch number this position corresponds to
	position.setProperty("uv", ""+details.get(2)); // store whether to expose UV at this position
	
	if (batchedPos.get(batch) == null) {
		List poses = new ArrayList();
		poses.add(position);
		batchedPos.put(batch, poses);
	} else {
		batchedPos.get(batch).add(position);
	}
}

for (batch : batchedPos.entrySet()) {
	print("Batch #"+batch.getKey());
	for (position : batch.getValue()) {
		print("\t"+position.getLabel()+"\t"+Boolean.valueOf(position.getProperty("uv")));
	}
}

// load settings from the acquisition panel
settings = mm.acquisitions().getAcquisitionSettings();

// Derive a new unique filename
loc = new File(settings.root, settings.prefix);
loc = mm.data().getUniqueSaveDirectory(loc.getPath());

// setup image storage
Datastore store = mm.data().createMultipageTIFFDatastore(loc, false, false);
DisplayWindow display = mm.displays().createDisplay(store);
mm.displays().manage(store);

// builders needed for image metadata
Coords.CoordsBuilder coordBuilder = mm.data().getCoordsBuilder();
Metadata.MetadataBuilder mdBuilder = mm.data().getMetadataBuilder();
smdBuilder = mm.data().getSummaryMetadataBuilder();

channels = settings.channels;
groupName = settings.channelGroup;

channelnames = new ArrayList();
totalChannels = 0;
for (ChannelSpec channel : channels ) {
	if (!channel.useChannel) { continue; }
	++totalChannels;
	channelnames.add((String) channel.config);
}

long interval = (long) settings.intervalMs;

smdBuilder = smdBuilder.channelNames(channelnames.toArray(new String[0])).
        channelGroup(groupName).
        waitInterval(interval).
        microManagerVersion(mm.compat().getVersion()).
        startDate((new Date()).toString());
smdBuilder = smdBuilder.intendedDimensions(mm.data().getCoordsBuilder().
        channel(totalChannels).
        z(0).
        time(settings.numFrames).
        stagePosition(batchedPos.size()).                    
        build());
store.setSummaryMetadata(smdBuilder.build());

zdevice = mmc.getFocusDevice();

starttime = System.nanoTime();
snapManager = mm.live();

mmc.setStateLabel("TIFilterBlockTop", "2-488lp");

try{
batchNum = 0;
// iterate over position batches
for (batch : batchedPos.entrySet()) {
	batchLabel = batch.getKey();
	batchPositions = batch.getValue();
	print("Imaging batch #" + batchLabel);

	// move to the first position in the batch before starting time course
	startPos = batchPositions.get(0);
	MultiStagePosition.goToPosition(startPos, mmc);

	// iterate over time course
	for (int t = 0; t < settings.numFrames; t++) {
		
		long start = System.currentTimeMillis();

		// each position must have a unique index so we offset from the current
		// batch number
		positionNum = batchNum-1;
		// iterate over positions in the position batch
		for (pos : batchPositions) {
			positionNum++;
			posName = pos.getLabel();
			x = pos.getX();
			y = pos.getY();
			print("Imaging position "+posName);
			MultiStagePosition.goToPosition(pos, mmc);

			/*
			 * UV Exposure
			 */
			if (t >= initial_frame){
				if (Boolean.valueOf(pos.getProperty("uv"))) {
					exposure = t == initial_frame ? initial_exposure : refresh_exposure;
					print("Exposing UV on "+pos.getLabel()+" for "+exposure+"ms"); 
					led_control("COM3", dac_number, power_lvl, exposure);
				}
			
			}

			channelNum = -1;
			// iterate over all the channels
			for (ChannelSpec channel : channels ) {
				if (!channel.useChannel) { continue; }
				++channelNum;
				print("\tImaging channel: "+channel.config);
				config = channel.config;
				mmc.setExposure(channel.exposure);
				mmc.setConfig(groupName, config);
				mmc.waitForConfig(groupName, config);

				xreal = mmc.getXPosition();
				yreal = mmc.getYPosition();
				z = mmc.getPosition(zdevice);
				pxsz = mmc.getPixelSizeUm();

				now = System.nanoTime();

				Image image = snapManager.snap(false).get(0);

				metadata = mdBuilder.positionName(posName).
							xPositionUm(xreal).
							yPositionUm(yreal).
							zPositionUm(z).
							pixelSizeUm(pxsz).
							elapsedTimeMs(((float)now-starttime)/1000/1000).build();
			
				coords = coordBuilder.channel(channelNum).time(t).stagePosition(positionNum).z(0).build();
				image = image.copyWith(coords, metadata);
				store.putImage(image);
			}
		
		}

		
		

		/* 
		 *  WAIT TILL NEXT TIME POINT
		 */
		
		long timediff = interval - (System.currentTimeMillis() - start);
		// do not sleep for last time point
		if (t+1 != settings.numFrames) {
			if (timediff > 0) { 
				Thread.sleep(timediff);
			} else {
				mm.scripter().message("Not enough time to batch images");
			}
		}	
	}
	batchNum += batchPositions.size();
}
}
finally {
	print("Quit.");
	store.freeze();
}