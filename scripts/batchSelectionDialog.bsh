/*
 * Dialog for assigning positions to batches.
 * 
 * Tamas Nagy, 2019
 */

import java.util.ArrayList;
import java.awt.Dimension;
import java.awt.Component;
import java.awt.event.MouseEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowAdapter;
import javax.swing.JTable;
import javax.swing.JScrollPane;
import javax.swing.JLabel;
import javax.swing.table.*;
import javax.swing.text.JTextComponent;
import javax.swing.SwingUtilies;
import javax.swing.border.TitledBorder;

import org.micromanager.internal.utils.MMDialog;
import org.micromanager.PositionList;

import net.miginfocom.swing.MigLayout;

addClassPath("C:/Data/tamas/MMConfigs/scripts/");
importCommands("/");

batchSelectionDialog(PositionList pl, mm){
	
	dlg = new MMDialog(mm.getFrame(), true);
	dlg.setTitle("Position Batching");
	dlg.setMinimumSize(new Dimension(275, 500));
	dlg.setLocation(100, 100);
	
	n = pl.getNumberOfPositions();
	
	Object[][] rowData = new Object[n][3];
	batchNum = 1;
	for (int i = 0; i < n; i++) {
		rowData[i][0] = pl.getPosition(i).getLabel();
		rowData[i][1] = batchNum;
		rowData[i][2] = false;
		batchNum++;
	}
	
	Object [] columnNames = new String[] { "Position", "Batch", "UV" };
	DefaultTableModel model = new DefaultTableModel(){
		public Class getColumnClass(int column) {
	       switch (column) {
	           case 0:
	               return String.class;
	           case 1:
	               return Integer.class;
	           default:
	               return Boolean.class;
	       }
	   }
	
	   public boolean isCellEditable(int row, int column) {
	        if (column == 0) { return false;}
	        return true;
	    }
	};
	// beanshell has a bug where inner classes can only be constructed with
	// the default constructor so we add the data next.
	model.setDataVector(rowData, columnNames);
	table = new JTable(){
		// shamelessly lifted from Rob Camick's answer here:
		// https://stackoverflow.com/questions/33067595/how-do-i-simulate-onstartcellediting-for-defaultcelleditor/33067747#33067747
	   public boolean editCellAt(int row, int column, EventObject e)
		{
			boolean result = super.editCellAt(row, column, e);
			final Component editor = getEditorComponent();
	
	    	if (editor != null && editor instanceof JTextComponent)
	    	{
	        	((JTextComponent)editor).selectAll();
	
	        	if (e == null)
	        	{
	        		((JTextComponent)editor).selectAll();
	        	}
	        	else if (e instanceof MouseEvent)
	        	{
	         	SwingUtilities.invokeLater(new Runnable()
	            {
	            	public void run()
	               {
	               	((JTextComponent)editor).selectAll();
	               }
	            });
	        	}
	    	}
	   return result;
		}
	};
	table.setModel(model);
	JLabel label = new JLabel("<html><p>Assign positions to batches "
	              + "and whether to activate UV at this position</p></html>");
	label.setPreferredSize(new Dimension(300, 20));
	dlg.setLayout(new MigLayout("flowx"));
	dlg.add(label,  "span 4, align center, wrap");
	dlg.add(new JScrollPane(table), "newline 20px, span");

	JPanel uvPanel = new JPanel();
	uvPanel.setLayout(new MigLayout("fillx"));
	uvPanel.setBorder(new TitledBorder("UV details"));

	uvPanel.add(new JLabel("DAC port:"), "split");
	dacEntry = new JTextField("DAC1");
	uvPanel.add(dacEntry);

	uvPanel.add(new JLabel("Power level (0.0-1.0):"), "newline, split");
	power = new JTextField("1.0");
	uvPanel.add(power);

	uvPanel.add(new JLabel("Initial exposure (ms):"), "newline, split");
	initialExposure = new JTextField("5000");
	uvPanel.add(initialExposure);

	uvPanel.add(new JLabel("Refresh exposure (ms):"), "newline, split");
	refreshExposure = new JTextField("2000");
	uvPanel.add(refreshExposure);

	uvPanel.add(new JLabel("UV Start Frame:"), "newline, split");
	initialFrame = new JTextField("20");
	uvPanel.add(initialFrame);

	JButton testButton = new JButton("Test LED");
	testButton.addActionListener(new ActionListener() {
	  
	   public void actionPerformed(ActionEvent event) {
	   	dac_number = dacEntry.getText();
	   	power_lvl = Double.valueOf(power.getText());
	   	initial_ex =  Integer.valueOf(initialExposure.getText());
	   	Runnable runnable = new Runnable() {
				public void run() {
	      		led_control("COM3", dac_number, power_lvl, initial_ex);
	      		mm.scripter().displayMessage("LED test stopped");
	      		testButton.setText("Test LED");
	      		testButton.setEnabled(true);
				}
	   	};

			testButton.setText("Exposing...");
			testButton.setEnabled(false);
			mm.scripter().displayMessage("LED test started...");
	   	Thread thread = new Thread(runnable);
	   	thread.start();
	   }
	});
	uvPanel.add(testButton, "newline");

	dlg.add(uvPanel, "newline 20px, growx");
	
	cancelled = false;
	JButton okButton = new JButton("OK");
	okButton.addActionListener(new ActionListener() {
	  
	   public void actionPerformed(ActionEvent event) {
	      dlg.dispose();
	   }
	});

	dlg.addWindowListener(new WindowAdapter() {
		public void windowClosing(WindowEvent e) {
			cancelled = true;
		}
	});
	
	dlg.getRootPane().setDefaultButton(okButton);
	dlg.add(okButton, "newline 20px, tag ok, split");
	
	JButton cancelButton = new JButton("Cancel");
	cancelButton.addActionListener(new ActionListener() {
	      public void actionPerformed(ActionEvent event) {
	         cancelled = true;
	         dlg.dispose();
	      }
	});
	dlg.add(cancelButton, "tag cancel");
	dlg.setVisible(true);
	if (cancelled) { return -1; }

	data = table.getModel().getDataVector();
	toReturn = new ArrayList();
	toReturn.add(data);
	toReturn.add(dacEntry.getText());
	toReturn.add(power.getText());
	toReturn.add(initialExposure.getText());
	toReturn.add(refreshExposure.getText());
	toReturn.add(initialFrame.getText());
	return toReturn;
}