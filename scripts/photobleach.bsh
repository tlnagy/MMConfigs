/*
 * Test photobeaching effect
 */


import org.micromanager.PositionList;
import org.micromanager.MultiStagePosition;
import org.micromanager.data.Coords;
import org.micromanager.data.Image;
import org.micromanager.data.Datastore;
import org.micromanager.data.Metadata;
import org.micromanager.data.internal.CommentsHelper;
import org.micromanager.display.DisplayWindow;
import org.micromanager.acquisition.ChannelSpec;

import java.util.LinkedHashMap;
import java.util.ArrayList;
import java.io.File;

PositionList pl = mm.positions().getPositionList();

addClassPath("C:/Data/tamas/MMConfigs/scripts/");
importCommands("/");

// load settings from the acquisition panel
settings = mm.acquisitions().getAcquisitionSettings();

// Derive a new unique filename
loc = new File(settings.root, settings.prefix);
loc = mm.data().getUniqueSaveDirectory(loc.getPath());

// setup image storage
Datastore store = mm.data().createMultipageTIFFDatastore(loc, false, false);
DisplayWindow display = mm.displays().createDisplay(store);
mm.displays().manage(store);
print("Created new store and display");

// builders needed for image metadata
Coords.CoordsBuilder coordBuilder = mm.data().getCoordsBuilder();
Metadata.MetadataBuilder mdBuilder = mm.data().getMetadataBuilder();
smdBuilder = mm.data().getSummaryMetadataBuilder();

starttime = System.nanoTime();

channels = settings.channels;
groupName = settings.channelGroup;

channelnames = new ArrayList();
totalChannels = 0;
for (ChannelSpec channel : channels ) {
	if (!channel.useChannel) { continue; }
	++totalChannels;
	channelnames.add((String) channel.config);
}

interval = 10000;
snapManager = mm.live();

smdBuilder = smdBuilder.channelNames(channelnames.toArray(new String[0])).
        channelGroup(groupName).
        microManagerVersion(mm.compat().getVersion()).
        prefix("photobleach").
        startDate((new Date()).toString());
smdBuilder = smdBuilder.intendedDimensions(mm.data().getCoordsBuilder().
        channel(totalChannels).
        z(0).
        time(numFrames).
        stagePosition(pl.getNumberOfPositions()).                    
        build());
store.setSummaryMetadata(smdBuilder.build());
zdevice = mmc.getFocusDevice();
CommentsHelper.setSummaryComment(store, "Taken using photobleach.bsh");

Thread.sleep(500);

try{
	for (int t = 0; t < settings.numFrames; t++) {

		long start = System.currentTimeMillis();
        print("t=" + t);

        for (int p=0; p < pl.getNumberOfPositions(); p++) {
            
            pos = pl.getPosition(p);
            posname = pos.getLabel();
            print("    Imaging "+posname);

            // if (p == 1 && t % 4 != 0) {
            //     print("Skipping " + posname);
            //     continue;
            // }
            // if (p == 2 && t % 16 != 0) {
            //     print("Skipping " + posname);
            //     continue;
            // }

            
            MultiStagePosition.goToPosition(pos, mmc);

            channelNum = -1;
			// iterate over all the channels
			for (ChannelSpec channel : channels ) {
				if (!channel.useChannel) { continue; }
				++channelNum;
				

                config = channel.config;

                if (config.equals("EPI_mNG")){
                    if (p == 1 && t % 3 != 0) {
                        print("\tSkipping " + config + " on " + posname);
                        continue;
                    }
                    if (p == 2 && t % 9 != 0) {
                        print("\tSkipping " + config + " on " + posname);
                        continue;
                    }
                }
                print("\tImaging channel: "+config);

                mmc.setExposure(channel.exposure);
					mmc.setConfig(groupName, config);
					mmc.waitForConfig(groupName, config);

                x = mmc.getXPosition();
                y = mmc.getYPosition();
                z = mmc.getPosition(zdevice);
                pxsz = mmc.getPixelSizeUm();
                now = System.nanoTime();
                Image image = snapManager.snap(false).get(0);

                metadata = mdBuilder.positionName(posname).
                                    xPositionUm(x).
                                    yPositionUm(y).
                                    zPositionUm(z).
                                    pixelSizeUm(pxsz).
                                    elapsedTimeMs(((float)now-starttime)/1000/1000).build();

                coords = coordBuilder.channel(channelNum).time(t).stagePosition(p).z(0).build();
                image = image.copyWith(coords, metadata);
                store.putImage(image);
            }
        }
		
		long timediff = interval - (System.currentTimeMillis() - start);
		// do not sleep for last time point
		if (t+1 != numFrames) {
			if (timediff > 0) { 
				Thread.sleep(timediff);
			}
		}
	}
}
finally {
//	led_control(ledcom, dacport, 0.0);
	store.freeze();
	store.close();
	print("Quit.");
}