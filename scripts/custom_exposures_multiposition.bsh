/*
 * This script is for imaging multiple positions with different imaging settings
 * per position. Currently, the standard acquisition dialog only allows the same
 * settings for every position, but I want to compare cells labeled using different 
 * dyes simultaneously in different wells.
 * 
 */

import org.micromanager.PositionList;
import org.micromanager.MultiStagePosition;
import org.micromanager.data.Coords;
import org.micromanager.data.Image;
import org.micromanager.data.Datastore;
import org.micromanager.data.Metadata;
import org.micromanager.data.internal.CommentsHelper;
import org.micromanager.display.DisplayWindow;
import org.micromanager.acquisition.ChannelSpec;

import java.util.LinkedHashMap;
import java.util.ArrayList;
import java.io.File;

PositionList pl = mm.positions().getPositionList();

// load settings from the acquisition panel
settings = mm.acquisitions().getAcquisitionSettings();

// Derive a new unique filename
loc = new File(settings.root, settings.prefix);
loc = mm.data().getUniqueSaveDirectory(loc.getPath());

// setup image storage
Datastore store = mm.data().createMultipageTIFFDatastore(loc, false, false);
DisplayWindow display = mm.displays().createDisplay(store);
mm.displays().manage(store);
print("Created new store and display");

// builders needed for image metadata
Coords.CoordsBuilder coordBuilder = mm.data().getCoordsBuilder();
Metadata.MetadataBuilder mdBuilder = mm.data().getMetadataBuilder();
smdBuilder = mm.data().getSummaryMetadataBuilder();

starttime = System.nanoTime();

/*
 * Small class to store per-position settings
 */
public class PosSettings { 
  public final String[] channelGroups; 
  public final String[] channelNames;
  public final Integer[] exposures;
    
  public PosSettings(String group, String name, Integer exposure) { 
    this(new String[]{group}, new String[]{name}, new Integer[]{exposure});
  }

  public PosSettings(String[] groups, String[] names, Integer[] exposures) {
    this.channelGroups = groups;
    this.channelNames = names;
    this.exposures = exposures;
  }
};

/*
 * ////////////////////////////////////////////////////////////////////
 * Set up per position imaging settings
 * ////////////////////////////////////////////////////////////////////
 */

ArrayList posSettings = new ArrayList();

interval = 15000;
int numFrames = 240;

groupName = "EPI";
// TODO: figure out how to handle channel info
// this should be equal to the union of all per-position channel sets
channelnames = new String[]{"EPI_DIA", "EPI_mNG", "EPI_RFP"};
totalChannels = channelnames.length;
posSettings.add(new PosSettings(groupName, new String[]{"EPI_DIA", "EPI_mNG"}, new Integer[]{40, 10}));
posSettings.add(new PosSettings(groupName, new String[]{"EPI_DIA", "EPI_RFP"}, new Integer[]{40, 200}));


if (pl.getNumberOfPositions() != posSettings.size()) {
	String s = "The number of position settings must match the number of positions: (" + pl.getNumberOfPositions() + ")";
	throw new ArrayIndexOutOfBoundsException(s);
}

snapManager = mm.live();

smdBuilder = smdBuilder.channelNames(channelnames).
        channelGroup(groupName).
        microManagerVersion(mm.compat().getVersion()).
        startDate((new Date()).toString());
smdBuilder = smdBuilder.intendedDimensions(mm.data().getCoordsBuilder().
        channel(totalChannels).
        z(0).
        time(numFrames).
        stagePosition(pl.getNumberOfPositions()).                    
        build());
store.setSummaryMetadata(smdBuilder.build());
zdevice = mmc.getFocusDevice();
CommentsHelper.setSummaryComment(store, "Taken using custom_exposures_multiposition.bsh");

Thread.sleep(500);


try{
	for (int t = 0; t < numFrames; t++) {

		long start = System.currentTimeMillis();
      print("t=" + t);

      for (int p=0; p < pl.getNumberOfPositions(); p++) {
            
			pos = pl.getPosition(p);
         posname = pos.getLabel();
         print("\tImaging "+posname);
            
         MultiStagePosition.goToPosition(pos, mmc);

         configs = posSettings.get(p)

         for (int c = 0; c < configs.channelNames.length; c++) { 

				config = configs.channelNames[c];
				exposure = (int) configs.exposures[c];
	         print("\t\tImaging channel: "+config);
	
	         mmc.setExposure(exposure);
				mmc.setConfig(groupName, config);
				mmc.waitForConfig(groupName, config);
	
	         x = mmc.getXPosition();
	         y = mmc.getYPosition();
	         z = mmc.getPosition(zdevice);
	         pxsz = mmc.getPixelSizeUm();
	         now = System.nanoTime();
	         Image image = snapManager.snap(false).get(0);
	
				metadata = mdBuilder.positionName(posname).
				                  xPositionUm(x).
				                  yPositionUm(y).
				                  zPositionUm(z).
				                  exposureMs(exposure).
				                  pixelSizeUm(pxsz).
				                  elapsedTimeMs(((float)now-starttime)/1000/1000).build();

				channel_index = Arrays.asList(channelnames).indexOf(config);
				coords = coordBuilder.channel(channel_index).time(t).stagePosition(p).z(0).build();
				image = image.copyWith(coords, metadata);
				store.putImage(image);
         }
		}
		
		long timediff = interval - (System.currentTimeMillis() - start);
		// do not sleep for last time point
		if (t+1 != numFrames) {
			if (timediff > 0) { 
				Thread.sleep(timediff);
			}
		}
	}
}
finally {
	store.freeze();
	store.close();
	print("Quit.");
}