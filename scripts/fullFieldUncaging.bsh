// load led controls
addClassPath("C:/Data/tamas/MMConfigs/scripts/");
importCommands("/");

acq = mm.acquisitions();
acq.clearRunnables();

settings = acq.getAcquisitionSettings();

// When to uncage in minutes
uncage_time_mins = 0.2;
uncage_frame = (int) (uncage_time_mins * 60 / (settings.intervalMs / 1000));

// how long to uncage for
uncaging_length_secs = 10;
print("Uncaging will happen at frame "+uncage_frame+" for "+uncaging_length_secs + "s ");

port = "COM3";
dac = "DAC2";
power = 1.0;
buffer = 50; // buffer time in milliseconds

uncaging = new Runnable() {
    int count = 0;
    public void run() {
        // this is a non-tracking async call since it shouldn't care about the status of
        // other async calls, this should dominate
        led_control_async(global.port, global.dac, global.power, global.uncaging_length_secs*1000, false);
    }
};

num_channels = settings.channels.size();

blanker = new Runnable() {
    int channel = 0;
    public void run() {
        exposure_time = (int)global.settings.channels.get(channel).exposure + global.buffer;
        // this should track whatever the master async call is doing
        led_control_async(global.port, global.dac, 0.0, exposure_time, true);

        channel = (channel + 1) % num_channels;
    }
};


// uncage at the given time point at the first position and first z slice
acq.attachRunnable(uncage_frame, -1, 0, 0, uncaging); // f, p, c, s

acq.attachRunnable(-1, 0, -1, 0, blanker); // f, p, c, s


message = "\n Taken using runnable:\n    UV exposed at frame #" + uncage_frame;
settings.comment += message;

acq.setAcquisitionSettings(settings);
print("Attached runnable");
