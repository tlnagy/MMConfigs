/*
 * Full Field Uncaging via Polygon
 * 
 * Tamas Nagy, 2020
 */


// load led controls
addClassPath("C:/Data/tamas/MMConfigs/scripts/");
importCommands("/");

acq = mm.acquisitions();
acq.clearRunnables();

settings = acq.getAcquisitionSettings();

// When to uncage in minutes
uncage_time_mins = 3;
uncage_frame = (int) (uncage_time_mins * 60 / (settings.intervalMs / 1000));

// how long to uncage for
uncaging_length_secs = 30;

port = "COM16"; // triggerscope com port
dac = "TTL9"; // 365nm LED port
power = 1.0;

// turn off LEDs
led_control(port, dac, 0.0);

long start_time = 0;
long led_start_time = -1000000;


/*
 * Runnable for turning on LEDs when `uncage_frame` is reached and until `uncaging_length_secs` 
 * is reached.
 */

uncaging = new Runnable() {
    int count = 0;
    public void run() {
        // this call should update the global led state
        led_control_async(global.port, global.dac, global.power, global.uncaging_length_secs*1000, true);
        global.led_start_time = System.currentTimeMillis();
        global.lastChange = global.led_start_time;
        print((global.led_start_time - global.start_time) + " LEDs on.");
    }
};

num_channels = settings.channels.size();

shutterManager = mm.getShutterManager();

long led_on = 0;

target_shutter = "Shutter-B 10-2";

/*
 * Runnable for tracking synchronized shutter state. Whenever `target_shutter` is on, this 
 * runnable shuts off the LEDs and then returns them to their original state when the
 * `target_shutter` closes again.
 */

runnable = new Runnable() {
    public void run() { 
        shutterTracker = new Runnable() {
            public void run() {
                print("Acquisition started...");
                
                global.start_time = System.currentTimeMillis();
                String state = "0";
                global.led_on = 0;

                print("0 Tracking shutters...");

                long timediff = 0;
                double prevVoltage = 0.0;

                while (global.mm.acquisitions().isAcquisitionRunning()) {
                    long howlong = 0;
                    long curr_time = System.currentTimeMillis();
                    timediff = curr_time - global.start_time;

                    // we detect a switch in the shutter state
                    String new_state = mmc.getProperty(global.target_shutter, "State");
                    if (!new_state.equals(state)) {
                        state = new_state;
                        howlong = (curr_time - global.lastChange);
                        if (global.current_led_voltage > 0.0) {
                            global.lastChange = curr_time;
                        }
                        
                        // if the shutter just opened, turn off the leds
                        if (state.equals("1")) {
                            led_control(super.port, super.dac, 0.0, false);
                            if (global.current_led_voltage > 0.0) {
                                print(timediff + " LEDs were on for " + howlong);
                                global.led_on += howlong;
                            }
                        } else { // otherwise the shutter just closed, turn leds back on
                            led_control(super.port, super.dac, global.current_led_voltage, false);
                            if (global.current_led_voltage > 0.0) {
                                print(timediff + " LEDs were off for " + howlong);
                            }
                        }
                        prevVoltage = global.current_led_voltage;
                    }

                    if ((prevVoltage > 0.0) && (global.current_led_voltage == 0.0)) {
                        print(timediff + " LEDs were on for "+ (curr_time - global.lastChange));
                        prevVoltage = 0.0;
                        global.led_on += (curr_time - global.lastChange);
                    }
				}

                print(timediff + " LEDs were on for " + global.led_on + "ms total");
                print("Unregistering all runnables");
                global.mm.acquisitions().clearRunnables();
            }
        };

        subThread = new Thread(shutterTracker);
        subThread.start();
    }
};



// uncage at the given time point at the first position and first z slice

f = uncage_frame;
p = -1;
c = 0;
s = 0;

acq.attachRunnable(f, p, c, s, uncaging); // f, p, c, s

print("Uncaging will happen at frame "+uncage_frame+" for "+uncaging_length_secs + "s ");
if (p == -1) {
	print("Uncaging will happen at each position");
} else {
	print("Uncaging will only happen at position " + p);
}

acq.attachRunnable(0, 0, 0, 0, runnable); // f, p, c, s



message = "\n Taken using runnable:\n    UV exposed at frame #" + uncage_frame;
settings.comment += message;

acq.setAcquisitionSettings(settings);
print("Attached runnable");