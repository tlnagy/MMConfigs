// load led controls
addClassPath("C:/Data/tamas/MMConfigs/scripts/");
importCommands("/");

acq = mm.acquisitions();
acq.clearRunnables();

settings = acq.getAcquisitionSettings();

// When to uncage in minutes
uncage_time_mins = 6;
uncage_frame = (int) (uncage_time_mins * 60 / (settings.intervalMs / 1000));

// how long to uncage for
uncaging_length_secs = 12;
print("Uncaging will happen at frame "+uncage_frame+" for "+uncaging_length_secs + "s ");

port = "COM3";
dac = "TTL2";
power = 1.0;

// turn off LEDs
led_control(port, dac, 0.0);

long start_time = 0;
long led_start_time = -1000000;

uncaging = new Runnable() {
    int count = 0;
    public void run() {
        // this call should update the global led state
        led_control_async(global.port, global.dac, global.power, global.uncaging_length_secs*1000, true);
        global.led_start_time = System.currentTimeMillis();
        global.lastChange = global.led_start_time;
        print((global.led_start_time - global.start_time) + " LEDs on.");
    }
};

num_channels = settings.channels.size();

shutterManager = mm.getShutterManager();

long led_on = 0;

runnable = new Runnable() {
    public void run() { 
        shutterTracker = new Runnable() {
            public void run() {
                print("Acquisition started...");

					// open shutter
					mmc.setShutterOpen("Shutter-A 10-2", true);
					mmc.unloadDevice("Shutter-A 10-2");
                
                global.start_time = System.currentTimeMillis();
                boolean state = false;
                global.led_on = 0;

                print("0 Tracking shutters...");

                long timediff = 0;
                double prevVoltage = 0.0;

                while (global.mm.acquisitions().isAcquisitionRunning()) {
                    long howlong = 0;
                    long curr_time = System.currentTimeMillis();
                    timediff = curr_time - global.start_time;

                    // we detect a switch in the shutter state
                    if (global.shutterManager.getShutter() != state) {
                        state = !state;
                        howlong = (curr_time - global.lastChange);
                        if (global.current_led_voltage > 0.0) {
                            global.lastChange = curr_time;
                        }
                        
                        // if the shutter just opened, turn off the leds
                        if (state) {
                            led_control(super.port, super.dac, 0.0, false);
                            if (global.current_led_voltage > 0.0) {
                                print(timediff + " LEDs were on for " + howlong);
                                global.led_on += howlong;
                            }
                        } else { // otherwise the shutter just closed, turn leds back on
                            led_control(super.port, super.dac, global.current_led_voltage, false);
                            if (global.current_led_voltage > 0.0) {
                                print(timediff + " LEDs were off for " + howlong);
                            }
                        }
                        prevVoltage = global.current_led_voltage;
                    }

                    if ((prevVoltage > 0.0) && (global.current_led_voltage == 0.0)) {
                        print(timediff + " LEDs were on for "+ (curr_time - global.lastChange));
                        prevVoltage = 0.0;
                        global.led_on += (curr_time - global.lastChange);
                    }
				}

                print(timediff + " LEDs were on for " + global.led_on + "ms total");
                print("Unregistering all runnables");
                global.mm.acquisitions().clearRunnables();

					 
                mmc.loadDevice("Shutter-A 10-2", "SutterLambda", "Shutter-A 10-2");
					 
					 mmc.setProperty("Shutter-A 10-2", "Port", "COM6");
					 mmc.setProperty("Core", "Shutter", "Shutter-A 10-2");

					 mmc.initializeDevice("Shutter-A 10-2");
					 Thread.sleep(2000);
					 mmc.setShutterOpen("Shutter-A 10-2", false);
            }
        };

        subThread = new Thread(shutterTracker);
        subThread.start();
    }
};



// uncage at the given time point at the first position and first z slice
acq.attachRunnable(uncage_frame, 0, 0, 0, uncaging); // f, p, c, s

acq.attachRunnable(0, 0, 0, 0, runnable); // f, p, c, s



message = "\n Taken using runnable:\n    UV exposed at frame #" + uncage_frame;
settings.comment += message;

acq.setAcquisitionSettings(settings);
print("Attached runnable");